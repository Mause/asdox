#summary Using the asDox API
#labels Featured

=Using asDox=

==Entry Point==

The Builder class is the main entry point for asDox. The Builder class parses source files and generates a model from those source files. The following code demonstrates how to create an instance of the Builder class:

{{{
from asdox import asBuilder

builder = asBuilder.Builder()
}}} 

==Adding Source Files==

After creating an instance of the Builder class you need to add Actionscript source files in order to generate a working model. The Builder class has an `addSource()` method for doing this. This method can take a string parameter representing Actionscript code, a filename, a directory, or a file object. When specifying a directory parameter to `addSource` asDox will automatically locate all files with a .as extension in the main directory and any subdirectories. 

{{{
builder.addSource("""
package com.googlecode.asdox
{
	public class MyClass
	{
	}
}
""")

builder.addSource("com\\googlecode\\asdox\\MyClass.as")
builder.addSource("com\\googlecode\\asdox\\")

f = Open("com\\googlecode\\asdox\\MyClass.as")
builder.addSource(f)
}}} 

==Navigating the Model==

Once all of your source files have been added to the Builder class you can begin navigating the model. The model consist of a heriachy of objects that represent an Actionscript source file:

  * Package
    * Metadata
    * Class/Interface
      * Metadata
      * Fields/Methods

===Exploring Packages===

The Builder class has several methods to help you access package information. You can test for the existance of a package by calling the `hasPackage()` method. This method returns True if the package exist and False otherwise.

{{{
builder.hasPackage("com.googlecode.asdox")
}}}

Once you have determined that the package exists you can use the `getPackage()' method of the Builder class to get that package from the model.

{{{
pkg = builder.getPackage("com.goolecode.asdox")
}}}

If you don't know the name of the package or if your model contains several packages you can use the 'getPackages()' method of the Builder class to get all packages contained in the model. This method returns a dictionary of packages with the key being the package name.

{{{
allPkgs = builder.getPackages()
for cls in allPkgs.values():
	print cls.getName()
}}}